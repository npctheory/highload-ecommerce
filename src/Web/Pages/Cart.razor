@page "/cart"
@using Shared.DTO.Orders
@using Shared.DTO.Orders.SendMailWithAttachment
@using Web.Components
@using Shared.DTO.Authentication.ListCharactersByAccountId
@inherits ComponentBase
@inject ICartService CartService
@inject NavigationManager Navigation
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IHttpClientFactory ClientFactory
@using Microsoft.AspNetCore.Components.Authorization

<h3 class="mb-4">Корзина</h3>

@if (cartItems.Count == 0)
{
    <div class="alert alert-warning" role="alert">
        Нет товаров в корзине
    </div>
}
else
{
    <ul class="list-group">
        @foreach (var item in cartItems)
        {
            <li class="list-group-item">
                @item.Title - @item.Price.ToString("C")
            </li>
        }
    </ul>
    <div class="mt-3">
        <strong>Total Price: @cartItems.Sum(item => item.Price).ToString("C")</strong>
    </div>

    <AuthorizeView>
        <Authorized>
            <div class="mt-3">
                <select class="form-select mb-3" @bind="selectedPaymentMethod">
                    <option value="coupon">Оплата купонами (3000000 купонов)</option>
                </select>
                <select class="form-select mb-3" @bind="selectedCharacterId">
                    @if (characters != null)
                    {
                        @foreach (var character in characters)
                        {
                            <option value="@character.CharId">@character.Name</option>
                        }
                    }
                </select>
                <button class="btn btn-primary" @onclick="HandleCheckout">Оформить заказ</button>
            </div>
        </Authorized>
        <NotAuthorized>
            <button class="btn btn-primary mt-3" @onclick="NavigateToSignIn">Войти в систему</button>
        </NotAuthorized>
    </AuthorizeView>
}

@code {
    List<CartItem> cartItems = new List<CartItem>();
    private string selectedPaymentMethod = "coupon";
    private int couponsCount = 0;
    private List<CharacterDTO> characters;
    private int selectedCharacterId;
    
    protected override async Task OnInitializedAsync()
    {
        cartItems = await CartService.GetCartItems();
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        if (authState.User.Identity.IsAuthenticated)
        {
            await LoadCouponsCount();
            await LoadCharacters();
        }
    }

    private async Task LoadCharacters()
    {
        var client = ClientFactory.CreateClient("AuthenticationService");
        try
        {
            var response = await client.GetFromJsonAsync<ListCharactersByAccountIdResponse>("characters/2000001");
            characters = response.Characters;
            if (characters.Any())
            {
                selectedCharacterId = characters.First().CharId;
            }
        }
        catch
        {
            characters = new List<CharacterDTO>();
        }
    }

    private async Task LoadCouponsCount()
    {
        var client = ClientFactory.CreateClient("PaymentService");
        try
        {
            var response = await client.GetFromJsonAsync<int>("coupons/count");
            couponsCount = response;
        }
        catch
        {
            couponsCount = 0;
        }
    }

    private void NavigateToSignIn()
    {
        Navigation.NavigateTo("/signin");
    }

    private async Task HandleCheckout()
    {
        var orderClient = ClientFactory.CreateClient("OrderService");

        try
        {
            // Send mail with attachment
            foreach (var item in cartItems)
            {
                var mailRequest = new SendMailWithAttachmentCommand
                {
                    DestName = "Character1",
                    DestId = 150001,
                    Zeny = 0,
                    AttachmentNameId = item.ProductId,
                    AttachmentAmount = 1
                };

                var mailResponse = await orderClient.PostAsJsonAsync("mail/send-with-attachment", mailRequest);
                
                if (!mailResponse.IsSuccessStatusCode)
                {
                    throw new Exception($"Failed to send mail for item {item.Title}");
                }
            }            
                //await CartService.ClearCart();
                Navigation.NavigateTo("/");
        }
        catch
        {
            // Handle errors appropriately
        }
    }
}